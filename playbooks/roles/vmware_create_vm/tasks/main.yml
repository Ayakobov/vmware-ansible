---

#- name: Load Vsphere Vars
#  include_vars: "{{ role_path }}/vars/vsphere_vars.yml"

#- name: Display New SSH Vars
#  debug:
#    msg: "SSH Vars user={{ ansible_ssh_user }}, pass= {{ ansible_ssh_pass }}, and Keyfile = {{ ansible_ssh_private_key_file}}"
#    verbosity: 3

- name: Display Current Host
  debug:
    msg: "Current Host is {{ inventory_openshift_hostname }} and Hostname is = {{ openshift_hostname }}"
    verbosity: 3

- name: Display Group Vars
  debug:
    msg: " Disk={{ vmDisk }}; Memory={{ vmMemory }}; CPU= {{ vmCPUs }} "
    verbosity: 3
  failed_when: False


#- name: Check if IP is free
#  command: ping -c1 {{ openshift_ip }}
#  delegate_to: localhost
#  register: ping_result
#  ignore_errors: yes

#- name: Abort Play when IP is in use
#  command: ping -c1 {{ openshift_ip }}
#  delegate_to: localhost
#  register: ping_result
#  failed_when: >
#    ping_result|success
#  changed_when: "ping_result|failed"

- name: Abort Play when IP is in use
  command: ping -c1 {{ openshift_ip }}
  delegate_to: localhost
  register: ping_result
  failed_when: >
    ("" not in ping_result.stderr)
  changed_when: False
  
- meta: end_play
  when: ping_result.rc==0


- name:
  debug:
    msg: " IP Address {{ openshift_ip }} is free"
    verbosity: 3
  when: ping_result.rc==1

- name: Creat a new VM
  block:
    - set_fact:
        disk_size: "{{ vmDisk }}"
        memory: "{{ vmMemory }}"
        cpu: "{{ vmCPUs }}"
      
    - vmware_guest:
        openshift_hostname: "{{ vcenter_openshift_hostname }}"
        username: "{{ vcenter_user }}"
        password: "{{ vcenter_pass }}"
        datacenter: "{{ vcenter_datacenter }}"
        name: "{{ openshift_hostname }}"
        template: "{{ vcenter_vmtemplate }}"
        resource_pool: "{{ vcenter_resource_pool | default(omit) }}"
        cluster: "{{ vcenter_cluster }}"
        state: poweredon
        folder: "{{ vcenter_folder_full }}"
        validate_certs: False
        is_template: no
        disk:
          - size_gb: "{{ disk_size }}"
            type: thin
            datastore: "{{ vcenter_datastore }}"
#          - size_gb: 10
#            type: thin
#            datastore: "{{ vcenter_datastore }}"
#          - size_gb: 20
#            type: thick
#            datastore: "{{ vcenter_datastore }}"
        hardware:
          memory_mb: "{{ memory }}"
          num_cpus: "{{ cpu }}"
        networks:
         - name: "{{ vlan }}"
           ip: "{{ openshift_ip }}"
           netmask: "{{ netmask }}"
           gateway: "{{ gateway }}"
        customization:
          dns_servers:
          - "{{ dns[0] }}"
          - "{{ dns[1] }}"
        wait_for_ip_address: yes
      register: new_vm
      delegate_to: localhost
  #    ignore_errors: yes
      failed_when: >
        (new_vm.failed==true)
  rescue:
    - debug:
        msg: " VM {{ openshift_hostname }} already Exists"
        verbosity: 3
    - meta: end_play

   

- name: New VM Status Message
  debug:
    msg: " New VM {{ openshift_hostname }}, {{ openshift_ip }}, is Up and Running"
  #  verbosity: 1
